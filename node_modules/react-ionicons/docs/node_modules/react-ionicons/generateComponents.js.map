{"version":3,"sources":["../src/generateComponents.js"],"names":["icons","require","fs","toCamelCase","camelCased","string","replace","g","toUpperCase","charAt","slice","createTemplate","componentName","paths","components","icon","tags","push","join","template","writeFile","err","console","log"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,SAAR,CAAd;AACA,IAAMC,KAAKD,QAAQ,IAAR,CAAX;;AAEA,IAAME,cAAc,SAAdA,WAAc,SAAU;AAC5B,MAAIC,aAAaC,OAAOC,OAAP,CAAe,WAAf,EAA4B,UAACC,CAAD;AAAA,WAAOA,EAAE,CAAF,EAAKC,WAAL,EAAP;AAAA,GAA5B,CAAjB;AACA,SAAOJ,WAAWK,MAAX,CAAkB,CAAlB,EAAqBD,WAArB,KAAqCJ,WAAWM,KAAX,CAAiB,CAAjB,CAA5C;AACD,CAHD;;AAKA,IAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,aAAD,EAAgBC,KAAhB,EAA0B;AAC/C,qIAKMD,aALN,6vBAiCiBC,KAjCjB,6TAmDAD,aAnDA,+KAgEAA,aAhEA,8RAgFeA,aAhFf;AAkFD,CAnFD;;AAqFA,IAAIE,aAAa,EAAjB;;;;;;;QACSC,I;;AACP,QAAMH,gBAAgBT,YAAYY,KAAKC,IAAL,CAAU,CAAV,CAAZ,CAAtB;AACAF,eAAWG,IAAX,YAAyBL,aAAzB;AACA,QAAMC,QAAQE,KAAKF,KAAL,CAAWK,IAAX,CAAgB,GAAhB,CAAd;AACA,QAAMC,WAAWR,eAAeC,aAAf,EAA8BC,KAA9B,CAAjB;AACAX,OAAGkB,SAAH,QAAkBR,aAAlB,UAAsCO,QAAtC,EAAgD,eAAO;AACrD,UAAIE,GAAJ,EAAS,OAAOC,QAAQC,GAAR,qBAA8BX,aAA9B,gBAAP;AACTU,cAAQC,GAAR,CAAeX,aAAf;AACD,KAHD;;;AALF,uBAAiBZ,KAAjB,8HAAwB;AAAA;AASvB;;;;;;;;;;;;;;;;AAEDE,GAAGkB,SAAH,4CAAsDN,WAAWI,IAAX,CAAgB,MAAhB,CAAtD,SAAmF,eAAO;AACxF,MAAIG,GAAJ,EAASC,QAAQC,GAAR,CAAYF,GAAZ;AACV,CAFD","file":"generateComponents.js","sourcesContent":["const icons = require('./icons')\nconst fs = require('fs')\n\nconst toCamelCase = string => {\n  let camelCased = string.replace(/-([a-z])/g, (g) => g[1].toUpperCase())\n  return camelCased.charAt(0).toUpperCase() + camelCased.slice(1)\n}\n\nconst createTemplate = (componentName, paths) => {\n  return `import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport SVG from './SVG'\n\nclass ${componentName} extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {classNames: [], animationActive: false}\n    this._getClasses = this._getClasses.bind(this)\n  }\n\n  render() {\n    const style = {\n      ...this.props.style,\n      color: this.props.color,\n      fontSize: this.props.fontSize,\n    }\n\n    return (\n      <SVG\n        style={this.props.style}\n        className={this._getClasses()}\n        fill={this.props.color}\n        width={this.props.fontSize}\n        height={this.props.fontSize}\n        viewBox=\"0 0 1024 1024\"\n        onClick={this.props.onClick}\n        rotate={this.props.rotate ? 1 : 0}\n        shake={this.props.shake ? 1 : 0}\n        beat={this.props.beat ? 1 : 0}\n      >\n        <path d=\"${paths}\"></path>\n      </SVG>\n    )\n  }\n\n  _getClasses() {\n    return [...this.state.classNames, this.props.className].join(' ')\n  }\n\n  _getPathByIconName() {\n    let icon = icons.find(icon => icon.tags[0] === this.props.icon)\n    if (icon) return icon.paths.join(' ')\n    return ''\n  }\n\n}\n\n\n${componentName}.defaultProps = {\n  // style\n  style: {},\n  color: '#000000',\n  fontSize: '22px',\n\n  // animation\n  shake: false,\n  beat: false,\n  rotate: false,\n}\n\n\n${componentName}.propTypes = {\n  // style\n  style: PropTypes.object,\n  color: PropTypes.string,\n  fontSize: PropTypes.string,\n\n  // animation\n  shake: PropTypes.bool,\n  beat: PropTypes.bool,\n  rotate: PropTypes.bool,\n\n  // functions\n  onClick: PropTypes.func\n}\n\n\nexport default ${componentName}\n`\n}\n\nlet components = []\nfor (let icon of icons) {\n  const componentName = toCamelCase(icon.tags[0])\n  components.push(`./src/${componentName}.js`)\n  const paths = icon.paths.join(' ')\n  const template = createTemplate(componentName, paths)\n  fs.writeFile(`./${componentName}.js`, template, err => {\n    if (err) return console.log(`Error creating ${componentName} component`)\n    console.log(`${componentName} created`)\n  })\n}\n\nfs.writeFile(`./components.js`, `module.exports = [\"${components.join('\", \"')}\"]`, err => {\n  if (err) console.log(err)\n})"]}