{"ast":null,"code":"import _objectSpread from \"/home/a11one/reverb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/a11one/reverb/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nvar config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithGoogle = function () {\n    return _this.auth.signInWithPopup(_this.googleProvider);\n  };\n\n  this.doSignInWithFacebook = function () {\n    return _this.auth.signInWithPopup(_this.facebookProvider);\n  };\n\n  this.doSignInWithTwitter = function () {\n    return _this.auth.signInWithPopup(_this.twitterProvider);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doSendEmailVerification = function () {\n    return _this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n    });\n  };\n\n  this.doPasswordUpdate = function (password) {\n    return _this.auth.currentUser.updatePassword(password);\n  };\n\n  this.onAuthUserListener = function (next, fallback) {\n    return _this.auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        _this.user(authUser.uid).once('value').then(function (snapshot) {\n          var dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n  };\n\n  this.user = function (uid) {\n    return _this.db.ref(\"users/\".concat(uid));\n  };\n\n  this.users = function () {\n    return _this.db.ref('users');\n  };\n\n  this.message = function (uid) {\n    return _this.db.ref(\"messages/\".concat(uid));\n  };\n\n  this.messages = function () {\n    return _this.db.ref('messages');\n  };\n\n  app.initializeApp(config);\n  /* Helper */\n\n  this.serverValue = app.database.ServerValue;\n  this.emailAuthProvider = app.auth.EmailAuthProvider;\n  /* Firebase APIs */\n\n  this.auth = app.auth();\n  this.db = app.database();\n  /* Social Sign In Method Provider */\n\n  this.googleProvider = new app.auth.GoogleAuthProvider();\n  this.facebookProvider = new app.auth.FacebookAuthProvider();\n  this.twitterProvider = new app.auth.TwitterAuthProvider();\n} // *** Auth API ***\n;\n\nexport default Firebase;","map":{"version":3,"sources":["/home/a11one/reverb/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","REACT_APP_CONFIRMATION_EMAIL_REDIRECT","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","message","messages","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.database();\n\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n\n  // *** Message API ***\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}